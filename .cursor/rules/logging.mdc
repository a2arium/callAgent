---
description: When logging is needed
globs: 
alwaysApply: false
---
# Logging Guidelines

## Core Principles

1.  **Use the Centralized Logger:** Always use the provided logger instance from `@a2arium/utils`.
2.  **Avoid `console.log`:** Use logger methods (`debug`, `info`, `warn`, `error`) for structured and controllable output.
3.  **Use Appropriate Levels:** Choose the level that best reflects the message's importance.
4.  **Include Context:** Log relevant variables and error objects.
5.  **Keep Logs Actionable:** Ensure logs provide useful information for monitoring and debugging.

## Logger Structure

The framework uses a singleton `logger` factory from `@a2arium/utils` to create `ComponentLogger` instances. These instances support nested creation for clear component/sub-component identification.

-   **Import the Logger:**
    ```typescript
    import { logger } from '@a2arium/utils';
    ```

-   **Base Loggers:** Components create a base logger:
    ```typescript
    const componentLogger = logger.createLogger({ prefix: 'ComponentName' });
    componentLogger.info('Component starting...'); 
    // Output: [ComponentName] Component starting...
    ```
-   **Nested Loggers:** Base loggers can create child loggers with extended prefixes:
    ```typescript
    const childLogger = componentLogger.createLogger({ prefix: 'SubComponent' });
    childLogger.info('Sub-component initialized.');
    // Output: [ComponentName: SubComponent] Sub-component initialized.
    ```

## Agent Logging (`ctx.logger`)

Agents should **always** use the logger provided on the task context (`ctx.logger`). This logger is automatically created by the runner with the correct nested prefix (e.g., `[StreamingRunner: agent-name]`).

```typescript
// Inside an agent's handleTask(ctx)
async handleTask(ctx: TaskContext) {
    ctx.logger.info('Processing input', { inputData: ctx.task.input });

    try {
        // ... agent logic ...
        ctx.logger.debug('Intermediate step successful');
        // ... more logic ...
        ctx.logger.info('Task completed successfully');
    } catch (error) {
        // ctx.fail() uses the logger internally, but you can add more context
        ctx.logger.error('Specific error during processing', error, { additionalDetail: '...' });
        await ctx.fail(error); // Use ctx.fail for standard failure handling
    }
}
```

## Log Levels & Usage

-   **`debug`**: Detailed internal state, variable values, steps useful only for deep debugging.
    ```typescript
    ctx.logger.debug('LLM Request prepared', { requestOptions });
    ```
-   **`info`**: General operational flow, task start/end, significant state changes.
    ```typescript
    ctx.logger.info('Received task', { taskId: ctx.task.id });
    ctx.logger.info('Agent reply sent');
    ```
-   **`warn`**: Potential issues, unexpected but recoverable situations, use of deprecated features, missing optional config.
    ```typescript
    ctx.logger.warn('Input parameter missing, using default value', { parameter: 'x' });
    ```
-   **`error`**: Unrecoverable errors, exceptions caught, failed operations. Use `ctx.fail()` for standard task failure.
    ```typescript
    // Logged automatically by ctx.fail() or runner's top-level catch:
    // logger.error('Agent task failed', error, { taskId }); 
    
    // Example of logging a specific error before calling ctx.fail()
    ctx.logger.error('Database connection failed', dbError, { connectionString });
    await ctx.fail(dbError);
    ```

## Best Practices

1.  **Use `ctx.logger` in Agents:** Always prefer the context logger.
2.  **Import from Utils:** For non-agent code, import from `@a2arium/utils`.
3.  **Structured Logging:** Pass objects/errors as separate arguments, not stringified.
    ```typescript
    // Good
    ctx.logger.info('User data retrieved', { userId: user.id });
    ctx.logger.error('API call failed', apiError, { endpoint: '/data' });

    // Bad
    ctx.logger.info(`User data retrieved: ${JSON.stringify(user)}`);
    ctx.logger.error(`API call failed: ${apiError.message}`); 
    ```
4.  **Error Handling:** Use `ctx.fail(error)` for standard task failures. Log specific errors with `ctx.logger.error` *before* calling `ctx.fail` if extra context is needed.

## Configuration

The root logger's level can be configured via the `LOG_LEVEL` environment variable (`debug`, `info`, `warn`, `error`). Child loggers inherit the level from their parent at creation time.

```env
# .env file example
LOG_LEVEL=debug
```

## Testing

-   Minimize logging in tests (e.g., set `LOG_LEVEL=error`).
-   Use mocking/spying (`jest.spyOn`) to verify specific log calls if necessary.

## Architecture

The logging system follows proper layering:
- **Foundation Layer**: `@a2arium/utils` (contains logger)
- **Infrastructure Layer**: `@a2arium/memory-sql`, adapters
- **Application Layer**: `@a2arium/core`, business logic

This ensures all packages can use consistent logging without circular dependencies.
